> alta::tcl_whisper "Cmd : [alta::prog_path] [alta::prog_version]([alta::prog_subversion])\n"
Cmd : D:/Dev/Supra/bin/af.exe 2021.06.b0(66adbd53)
> alta::tcl_whisper "Args : [string map {\{ \" \} \"} $tcl_cmd_args]\n"
Args : -X "set QUARTUS_SDC true" -X "set FITTING timing_more" -X "set FITTER hybrid" -X "set EFFORT highest" -X "set HOLDX default" -X "set SKEW   basic" -X "set MODE QUARTUS" -X "set FLOW ALL" -F ./af_run.tcl
> 
> set_seed_rand $SEED
> set ar_timing_derate ${TIMING_DERATE}
> 
> date_time
Fri May 20 11:24:29 2022
> if { [file exists "./${DESIGN}.pre.asf"] } {
  alta::tcl_highlight "Using pre-ASF file ${DESIGN}.pre.asf.\n"
  source "./${DESIGN}.pre.asf"
}
Using pre-ASF file NSPLD.pre.asf.
> 
> eval "load_architect ${no_route} -type ${DEVICE} 1 1 1000 1000"
Total IO  : 84
Total Pin : 40/7
Top array is built.
Loading architect libraries...
## CPU time: 0:0:0, REAL time: 0:0:0
## Memory Usage: 30MB (30MB)
Loading route table...
## CPU time: 0:0:1, REAL time: 0:0:2
## Memory Usage: 95MB (95MB)
> foreach ip_file $IP_FILES { read_ip $ip_file; }
> 
> set LOAD_DB    false
> set LOAD_PLACE false
> set LOAD_ROUTE false
> if { $FLOW == "LOAD" || $FLOW == "CHECK" || $FLOW == "PROBE" } {
  set LOAD_DB    true
  set LOAD_PLACE true
  set LOAD_ROUTE true
} elseif { $FLOW == "R" || $FLOW == "ROUTE" } {
  set LOAD_DB    true
  set LOAD_PLACE true
}
> 
> set ORIGINAL_QSF "E:/Works/NSPLD/./NSPLD.qsf"
> set ORIGINAL_PIN "E:/Works/NSPLD/output_files/NSPLD.pin"
> 
> #################################################################################
> 
> if { $FLOW == "GEN" } {
  if { ! [info exists CONFIG_BITS] } {
    set CONFIG_BITS "${RESULT_DIR}/${DESIGN}.bin"
  }
  if { [llength $CONFIG_BITS] > 1 } {
    if { ! [info exists BOOT_BINARY] } {
      set BOOT_BINARY "${RESULT_DIR}/${DESIGN}_boot.bin"
    }
    if { ! [info exists CONFIG_ADDRESSES] } {
      set CONFIG_ADDRESSES ""
    }
    generate_binary -master $BOOT_BINARY -inputs $CONFIG_BITS -address $CONFIG_ADDRESSES
  } else {
    set CONFIG_ROOT   [file rootname [lindex $CONFIG_BITS 0]]
    set SLAVE_RBF     "${CONFIG_ROOT}_slave.rbf"
    set MASTER_BINARY "${CONFIG_ROOT}_master.bin"
    if { [file exists [lindex $CONFIG_BITS 0]] } {
      generate_binary -slave  $SLAVE_RBF     -inputs [lindex $CONFIG_BITS 0] -reverse
      generate_binary -master $MASTER_BINARY -inputs [lindex $CONFIG_BITS 0]
    }
    if { ! [info exists BOOT_BINARY] } {
      set BOOT_BINARY $MASTER_BINARY
    }
  }
  set PRG_FILE [file rootname $BOOT_BINARY].prg
  set AS_FILE  [file rootname $BOOT_BINARY]_as.prg
  generate_programming_file $BOOT_BINARY -erase $ERASE \
                            -program $PROGRAM -verify $VERIFY -offset $OFFSET \
                            -prg $PRG_FILE -as $AS_FILE
  exit
}
> 
> if { $LOAD_DB } {
  load_db -top ${TOP_MODULE}
  set sdc "./${DESIGN}.adc"
  if { ! [file exists $sdc] } { set sdc "./${DESIGN}.sdc"; }
  if { [file exists $sdc] } { read_sdc $sdc; }

} elseif { $MODE == "QUARTUS" } {
  set verilog ${DESIGN}.vo
  set is_migrated false
  if { ! [file exists $verilog] } {
    set verilog "./simulation/modelsim/${DESIGN}.vo"
    set is_migrated true
  }
  if { ! [file exists $verilog] } {
    error "Can not find design verilog file $verilog"
  }
  alta::tcl_highlight "Using design verilog file $verilog.\n"
  set ret [read_design -top ${TOP_MODULE} -ve $VE_FILE -qsf $ORIGINAL_QSF $verilog -hierachy 1]
  if { !$ret } { exit -1; }

  set sdc "./${DESIGN}.adc"
  if { ! [file exists $sdc] } { set sdc "./${DESIGN}.sdc"; }
  if { ! [file exists $sdc] } {
    alta::tcl_warn "Can not find design SDC file $sdc"
  } else {
    alta::tcl_highlight "Using design SDC file $sdc.\n"
    read_sdc $sdc
  }

} elseif { $MODE == "SYNPLICITY" || $MODE == "NATIVE" } {
  set db_gclk_assignment_level 2
  set verilog ${DESIGN}.vqm
  set is_migrated false
  if { ! [file exists $verilog] } {
    error "Can not find design verilog file $verilog"
  }

  set sdc "./${DESIGN}.adc"
  if { ! [file exists $sdc] } { set sdc "./${DESIGN}.sdc"; }
  alta::tcl_highlight "Using design verilog file $verilog.\n"
  if { ! [file exists $sdc] } {
    alta::tcl_warn "Can not find design SDC file $sdc"
    set ret [read_design_and_pack -sdc $sdc  -top ${TOP_MODULE} $verilog]
  } else {
    alta::tcl_highlight "Using design SDC file $sdc.\n"
    set ret [read_design_and_pack -top ${TOP_MODULE} $verilog]
  }
  if { !$ret } { exit -1; }

} else {
  error "Unsupported mode $MODE"
}
Using design verilog file ./simulation/modelsim/NSPLD.vo.
Preparing design...
## CPU time: 0:0:0, REAL time: 0:0:0
## Memory Usage: 96MB (96MB)
Pseudo pack design...
Packing Statistics
 Total      Logics : 50/1280 (  3%)
 Total        LUTs : 50/1280 (  3%)
 Total   Registers : 36/1280 (  2%)
 Total  Block Rams :  0/  15 (  0%)
 Total  Slice Rams :  0/ 160 (  0%)
 Total        PLLs :  0/   1 (  0%)
 Total        Pins :  4/  40 ( 10%)
 Global    Signals :  1/   8 ( 12%)
      CLK~inputclkctrl_outclk (from:   CLK~input_o)
 Total Lonely   Datain   : 0
 Total Lonely   Register : 0
 Total LUT-FF   Pairs    : 36
 Total Register Packings : 0
 Registers with synchronous    reset : 32
 Registers with asynchronous   reset : 0
 Registers with sync and async reset : 0
## CPU time: 0:0:0, REAL time: 0:0:0
## Memory Usage: 97MB (97MB)
Filter verilog...
## CPU time: 0:0:0, REAL time: 0:0:0
## Memory Usage: 97MB (97MB)
Read DB design...
## CPU time: 0:0:0, REAL time: 0:0:1
## Memory Usage: 118MB (118MB)
Process design...
> set_instance_assignment -name ENABLE_OPEN_DRAIN -to LED[0]~output false
> set_instance_assignment -name ENABLE_OPEN_DRAIN -to LED[1]~output false
Info: Found GCLK net CLK~inputclkctrl_outclk (4).
## CPU time: 0:0:0, REAL time: 0:0:0
## Memory Usage: 118MB (118MB)
Using design SDC file ./NSPLD.sdc.
derive_pll_clocks -create_base_clocks
> 
> if { [info exists FITTING] } {
  if { $FITTING == "Auto" } { set FITTING auto; }
  set_mode -fitting $FITTING
}
>  set pl_criticality_wratio  "5.00 5.00 5.00 1.00"
> #set pl_max_iter_eco        "10 20 300 40 3  100 100 1"
> ##et pl_eco_slack_crit      "99999. 1.00  0.10 8 0.03 35 0.01 170"
> 
> ##et pl_priority_compare  "2 2 2 3"
> #set pl_priority_result   "2 1 1 0"
> #set pl_priority_pass     "2 1 1 0"
> #set pl_swap_cost_margin       "200.0  0.0  200.0  0.0  200.0  0.0   0.00  0.0"
>  set pl_swap_wirelength_margin "200.0  0.0  200.0  0.0  200.0  0.0   020.0 -0.3  2000. 1.50"
>  set pl_swap_congestion_margin "100.0  0.0  100.0  0.0  100.0  0.0   010.0 -0.3  1000. 1.25"
> #set pl_criticality_beta "1.0 3.0 1.0  1.0 3.0 1.0  1.0 3.0 1.0  99999 3.0 3.0"
> 
>  set rt_retiming_idx         5
>  set rt_converge_accelerator "3 1 0 0"
> #set rt_pres_cost_ratio      "1.00 1.50  2.00 2.50"
>  set rt_dly_ratio            "0.55 0.35 0.30  0.50 0.50 0.30"
>  set rt_reroute_max_iter     "6  4 5  7 9  12"
>  set rt_reroute_start_iter   "0  0 1  2 4  0 "
>  set rt_quick_converge_ratio 0.00
> if { [info exists FITTER] } {
  if { $FITTER == "Auto" } {
    if { $MODE == "QUARTUS" } { set FITTER hybrid; } else { set FITTER full; }
  }
  if { $MODE == "SYNPLICITY" || $MODE == "NATIVE" } { set FITTER full; }
  set_mode -fitter $FITTER
}
>  set pl_reuse_existing_placement true
>  set pl_fix_bram_cells 0
>  set pl_fix_mult_cells 0
> if { [info exists EFFORT] } { set_mode -effort $EFFORT; }
> #set pl_neighbor_swap_range "2  6  6  3 "
>  set pl_pass_result "1 1 1 1"
>  set pl_max_pass    "2 1 1 1 1"
>  set pl_max_iter       10
>  set pl_max_iter_part  20
>  set pl_max_iter_final 20
>  set pl_max_iter_legal 10
>  set pl_max_iter_touch 00
> #set pl_neighbor_swap_range "2  6  6  3 "
> #set pl_spread_swap_max_iter "3 5  5 4"
> #set pl_use_initial_place_once 0
>  set rt_min_converge "7"
>  set rt_optimize_max "3"
> if { [info exists SKEW  ] } { set_mode -skew   $SKEW  ; }
>  set pl_useful_skew_level -1
>  set rt_useful_skew_level 0
>  set rt_useful_skew_bram         true
>  set rt_useful_skew_io           false
>  set rt_useful_skew_io_ireg      false
>  set rt_useful_skew_io_oreg      false
>  set rt_useful_skew_output_io    false
>  set rt_useful_skew_input_io     false
>  set rt_useful_skew_unconstraint "false false"
>  set rt_useful_skew_max                "0 100"
>  set rt_skew_crit_minmax               "0.00 1.00"
> #set rt_useful_skew_setup_slac_margin  "1.00 1.00  1.00 1.00  1.00 0.10 0.50 0.10 0.70 0.10  1.00"
> #set rt_useful_skew_hold_slack_margin  "0.10 0.10  0.30 0.30  0.30 0.30"
> #set rt_useful_skew_hold_slack_ratio   "0.05 0.05  0.10 0.10  0.10 0.10"
> if { [info exists SKOPE ] } { set_mode -skope  $SKOPE ; }
> if { [info exists HOLDX ] } { set_mode -holdx  $HOLDX; }
> # Minimal logical slice hold fix, only by routing to bram/mult, no IO delay
> 
>  set ta_cross_clock_slack "2 0"
> 
> #set pl_max_iter_hold_fix "30 1 3"
> #set pl_hold_slack_margin  0.2
> #set pl_setup_slack_margin "0.5 -1000."
> #set pl_net_hold_fix_target "alta_bram alta_bram9k alta_mult"
> 
>  set rt_hold_slack_margin  "0.2 0.2    0.2 0.2    0.2 0.7   -1000. 0.0"
>  set rt_setup_slack_margin "0.5 -1000. 0.5 -1000. 0.0 -1000."
> #set rt_net_hold_crit_minmax "0.5 0.5"
>  set rt_net_hold_budget_method 0
>  set rt_net_hold_fix_target "alta_bram alta_bram9k alta_mult"
> 
> #set pl_net_hold_fix_clock false
> #set pl_net_hold_fix_auto  false
> #set pl_net_hold_fix_io    false
> #set rt_net_hold_fix_start false
> #set rt_net_hold_fix_clock false
> #set rt_net_hold_fix_auto  false
> #set rt_net_hold_fix_io    false
> if { [info exists TUNING] } { set_mode -tuning $TUNING; }
> if { [info exists TARGET] } { set_mode -target $TARGET; }
> if { [info exists PRESET] } { set_mode -preset $PRESET; }
> if { [info exists ADJUST] } { set pl_criticality_wadjust $ADJUST; }
> 
> set alta_aqf $::alta_work/alta.aqf
> if { $LOAD_DB } {
  # Empty
} elseif { true } {
  if { [file exists $VE_FILE] } {
    set ORIGINAL_PIN ""
  } elseif { ! [file exists $ORIGINAL_PIN] } {
    if { $is_migrated } {
      error "Can not find design PIN file $ORIGINAL_PIN, please compile design first"
    }
    set ORIGINAL_PIN ""
  }
  if { [file exists $ORIGINAL_QSF] } {
    alta::convert_quartus_settings_cmd $ORIGINAL_QSF $ORIGINAL_PIN $alta_aqf
  } elseif { $is_migrated } {
    error "Can not find design exported QSF file $ORIGINAL_QSF, please export assigments first"
  }
}
Warn: Location PIN_114 in file E:/Works/NSPLD/output_files/NSPLD.pin line 181 is not found in device.
Warn: Location PIN_118 in file E:/Works/NSPLD/output_files/NSPLD.pin line 185 is not found in device.
Warn: Location PIN_119 in file E:/Works/NSPLD/output_files/NSPLD.pin line 186 is not found in device.
> if { [file exists "$alta_aqf"] } {
  alta::tcl_highlight "Using AQF file $alta_aqf.\n"
  source "$alta_aqf"
}
Using AQF file ./alta_db/alta.aqf.
> set_instance_assignment -name IO_STANDARD "3.3-V LVTTL" -to CLK
> set_location_assignment PIN_18 -to CLK
> if { [file exists "./${DESIGN}.asf"] } {
  alta::tcl_highlight "Using ASF file ${DESIGN}.asf.\n"
  source "./${DESIGN}.asf"
}
Using ASF file NSPLD.asf.
> set_location_assignment -to nRST PIN_25
> set_location_assignment -to CLK PIN_13
> set_location_assignment -to LED[0] PIN_22
> set_location_assignment -to LED[1] PIN_23
> 
> if { $FLOW == "PROBE" } {
  set ret [place_pseudo -user_io -place_io -place_pll -place_gclk]
  if { !$ret } { exit -1 }

  set force ""
  if { [info exists PROBE_FORCE] && $PROBE_FORCE } { set force "-force" }
  eval "probe_design -froms {${PROBE_FROMS}} -tos {${PROBE_TOS}} ${force}"

} elseif { $FLOW == "CHECK" } {
  set ret [place_pseudo -user_io -place_io -place_pll -place_gclk]
  if { !$ret } { exit -1 }

  if { [file exists "./${DESIGN}.chk"] } {
    alta::tcl_highlight "Using CHK file ${DESIGN}.chk.\n"
    source "./${DESIGN}.chk"
    place_design -dry
    check_design -rule led_guide
  } else {
    error "Can not find design CHECK file ${DESIGN}.chk"
  }

} else {
  set ret [place_pseudo -user_io -place_io -place_pll -place_gclk -warn_io]
  if { !$ret } { exit -1 }
  if { $FLOW == "PACK" } { exit }

  set org_place ""
  set load_place ""
  set load_route ""
  set quiet ""
  if {  $ORG_PLACE } { set  org_place "-org_place" ; }
  if { $LOAD_PLACE } { set load_place "-load_place"; }
  if { $LOAD_ROUTE } { set load_route "-load_route"; }
  eval "place_and_route_design $org_place $load_place $load_route \
                               -retry $RETRY $seed_rand $quiet"
}
Info: Auto constraint: create_clock -name Internal_generated_clock_NSPLD|CLK -period 1000.000 CLK.
Placement Statistics
 Total  Logic    Tiles   : 4/80 (5.0%)
 Total  Valid    Nets    : 65 (33+32)
 Total  Valid    Fanouts : 305 (117+188)
 Total  Tile     Fanouts : 64
 Tile   Zip      Fanins  : 8 (1:25)
 Tile   Zip      Fanouts : 9 (1:21)
 Total  Ignored  Nets    : 67
 Total  Valid    Blocks  : 6 (3/3)
 Total  Ignored  Blocks  : 0
 Total  Zip Complexities : 7/44 1.97/13.78
 Avg    Zip   Bottleneck : 0.75 1.25
 Avg    Net   Bottleneck : 9.00 222.50
Iter #1/1 ...
Pass 1 #1/2 ...
Partitioning...
 step = 3, partition : 2,2
....................
 step = 4, partition : 2,2
....................

## CPU time: 0:0:0, REAL time: 0:0:0
Pass 1 #2/2 ...
Partitioning...
 step = 3, partition : 2,2
....................
 step = 4, partition : 2,2
....................

## CPU time: 0:0:0, REAL time: 0:0:0
Pass 2 #1/1 ...
Legalization and Swapping...
..........

## CPU time: 0:0:0, REAL time: 0:0:0
Pass 3 #1/1 ...
Touchup...


## CPU time: 0:0:0, REAL time: 0:0:0
Pass 4 #1/1 ...
Optimization...
............................................................
Finishing...

## CPU time: 0:0:0, REAL time: 0:0:0
Total wire cost after placement: 0:0:0(0:0) 74.543(26.89)+96(0)+4 51.3667(7.202)+-20

*** Post Placement Timing Report ***
=== User constraints ===


=== Auto constraints ===
Fmax report
  User constraint:   1.000MHz, Fmax: 145.540MHz, Clock: Internal_generated_clock_NSPLD|CLK

Clock transfer report:
  Worst setup: 993.129, with clock Internal_generated_clock_NSPLD|CLK

  Worst  hold:   1.052, with clock Internal_generated_clock_NSPLD|CLK

Coverage report
  User constraints covered 0 connections out of 205 total, coverage: 0.0%
  Auto constraints covered 197 connections out of 205 total, coverage: 96.1%


Hold from state[1] to state[1], clock Internal_generated_clock_NSPLD|CLK, constraint 0.000
  Slack:   1.052
    Arrival Time:    3.092
    Required Time:   2.040

*** End Timing Report ***

route_design -dump ./alta_db/route.tx -replace ./alta_db/replace.tx 
Route Design Statistics
 Total Routing Nets : 65
 Fanout     Average : 3.69 (1..16)
 Max   Fanout  Net  : AsyncReset_X86_Y60_GND
 Logic       Slices : 50/1280 (3.9%)

Routing...
 Budget Useful Skew...
=== User constraints ===
=== Auto constraints ===
Fmax report
  User constraint:   1.000MHz, Fmax: 145.540MHz, Clock: Internal_generated_clock_NSPLD|CLK

## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 1/1, route#: 65, violation# : 14, overflow# : 14, conflict# : 18, node#: 385
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 2/2, route#: 65, violation# : 12, overflow# : 12, conflict# : 21, node#: 395
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 3/3, route#: 65, violation# : 6, overflow# : 6, conflict# : 9, node#: 401
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 4/4, route#: 65, violation# : 0, overflow# : 0, conflict# : 0, node#: 411
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 5/1, route#: 2, violation# : 0, overflow# : 0, conflict# : 0, node#: 411
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 6/2, route#: 2, violation# : 0, overflow# : 0, conflict# : 0, node#: 411
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 7/1, route#: 2, violation# : 0, overflow# : 0, conflict# : 0, node#: 411
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 8/1, route#: 2, violation# : 0, overflow# : 0, conflict# : 0, node#: 411
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 9/1, route#: 2, violation# : 0, overflow# : 0, conflict# : 0, node#: 411
## CPU time: 0:0:0, REAL time: 0:0:0
 iter = 10/1, route#: 2, violation# : 0, overflow# : 0, conflict# : 0, node#: 411
Optimizing...
...

Done

*** Post Routing Timing Report ***
=== User constraints ===


=== Auto constraints ===
Fmax report
  User constraint:   1.000MHz, Fmax: 117.315MHz, Clock: Internal_generated_clock_NSPLD|CLK

Clock transfer report:
  Worst setup: 991.476, with clock Internal_generated_clock_NSPLD|CLK

  Worst  hold:   1.052, with clock Internal_generated_clock_NSPLD|CLK

Coverage report
  User constraints covered 0 connections out of 205 total, coverage: 0.0%
  Auto constraints covered 197 connections out of 205 total, coverage: 96.1%


Hold from state[1] to state[1], clock Internal_generated_clock_NSPLD|CLK, constraint 0.000
  Slack:   1.052
    Arrival Time:    4.110
    Required Time:   3.058

*** End Timing Report ***

> 
> date_time
Fri May 20 11:24:35 2022
> if { $FLOW != "CHECK" } {
if { $FLOW != "PROBE" } {
#report_timing -verbose 1 -file $::alta_work/timing.rpt.gz
report_timing -verbose 2 -setup -file $::alta_work/setup.rpt.gz
report_timing -verbose 2 -setup -brief -file $::alta_work/setup_summary.rpt.gz
report_timing -verbose 2 -hold -file $::alta_work/hold.rpt.gz
report_timing -verbose 2 -hold -brief -file $::alta_work/hold_summary.rpt.gz

set ta_report_auto_constraints 0
report_timing -fmax -file $::alta_work/fmax.rpt
report_timing -xfer -file $::alta_work/xfer.rpt
set ta_report_auto_constraints $ta_report_auto

#set ta_coverage_limit "0.95 0.90"
set ta_dump_uncovered 1
report_timing -verbose 1 -coverage >! $::alta_work/coverage.rpt.gz
#unset ta_coverage_limit
unset ta_dump_uncovered


if { ! [info exists rt_report_timing_fast] } {
  set rt_report_timing_fast false
}
if { $rt_report_timing_fast } {
  set_timing_corner fast
  route_delay -quiet
  report_timing -verbose 2 -setup -file $::alta_work/setup_fast.rpt.gz
  report_timing -verbose 2 -setup -brief -file $::alta_work/setup_fast_summary.rpt.gz
  report_timing -verbose 2 -hold -file $::alta_work/hold_fast.rpt.gz
  report_timing -verbose 2 -hold -brief -file $::alta_work/hold_fast_summary.rpt.gz
  set ta_report_auto_constraints 0
  report_timing -fmax -file $::alta_work/fmax_fast.rpt
  report_timing -xfer -file $::alta_work/xfer_fast.rpt
  set ta_report_auto_constraints $ta_report_auto
}

write_routed_design "${RESULT_DIR}/${RESULT}_routed.v"
}

bitgen normal -prg "${RESULT_DIR}/${RESULT}.prg" -bin "${RESULT_DIR}/${RESULT}.bin"
bitgen sram -prg "${RESULT_DIR}/${RESULT}_sram.prg"
bitgen download -bin "${RESULT_DIR}/${RESULT}.bin" -svf "${RESULT_DIR}/${RESULT}_download.svf"
generate_binary -slave "${RESULT_DIR}/${RESULT}_slave.rbf" \
                -inputs "${RESULT_DIR}/${RESULT}.bin" -reverse
generate_binary -master "${RESULT_DIR}/${RESULT}_master.bin" \
                -inputs "${RESULT_DIR}/${RESULT}.bin"
generate_programming_file "${RESULT_DIR}/${RESULT}_master.bin" -prg "${RESULT_DIR}/${RESULT}_master.prg" \
  -as "${RESULT_DIR}/${RESULT}_master_as.prg" -hybrid "${RESULT_DIR}/${RESULT}_hybrid.prg"
}
Warn: User constraints coverage is too low at 0.0%.
Info: Using config file ./NSPLD.bin to generate download file ./NSPLD_download.svf.
> 
> if { [file exists "./${DESIGN}.post.asf"] } {
  alta::tcl_highlight "Using post-ASF file ${DESIGN}.post.asf.\n"
  source "./${DESIGN}.post.asf"
}
Using post-ASF file NSPLD.post.asf.
> date_time
Fri May 20 11:24:37 2022
> exit

Total 0 fatals, 0 errors, 4 warnings, 3 infos.
